/*
  Below are type signatures of builtin - native functions
  This one is defined as a syntax sugar:
  ??? : Forall a. a
  so that the typechecker accepts empty expressions (they will be replaced with native code in evaluation).
*/
data Bool = True | False;
// special syntax for defining builtin +,*,-,/
defop (+) (a: Int, b: Int): Int = ???;
defop (-) (a: Int, b: Int): Int = ???;
defop (*) (a: Int, b: Int): Int = ???;
defop (/) (a: Int, b: Int): Int = ???;
defop <+> (a: String, b: String): String = ???;
defop == [t](a: t, b: t): Bool = ???;
defop <= (a: Int, b: Int): Bool = ???;
defop >= (a: Int, b: Int): Bool = ???;
defop < (a: Int, b: Int): Bool = ???;
defop > (a: Int, b: Int): Bool = ???;
def if_then_else[a](cond: Bool, tt: a, ff: a): a = ???;
def error[a](message: String): a = ???;
def toString[a](x: a): String = ???;
def print(msg: String): IO () = ???;
def readLine() : IO String = ???;
defop >>= [a][b](m: IO a, f: (a -> IO b)): IO b = ???;
defop >>[a][b](x: IO a, y: IO b): IO b = ???;
def return[a](x: a): IO a = ???;
def limit[a](maxApplications: Int, expr: a): Maybe a = ???;
def seq[a][b](a: a, b: b): b = ???;

data List a = Cons a * List a | Nil;
