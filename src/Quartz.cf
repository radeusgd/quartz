comment "//" ;
comment "/*" "*/" ;

position token QIdent (letter (letter | digit | '_')*) ;
token CustomOperator ('>' | '<' | '=' | '$' | '!')('?' | '>' | '<' | '=' | '$' | '!' | '+' | '*' | '/' | '-')* ;

Prog. Program ::= [Declaration] ;

Func. Declaration ::= "def" QIdent "(" [Arg] ")" ":" Type "=" Exp ;
-- FuncDefault. Declaration ::= "def" QIdent "(" [Arg] ")" "=" Exp ;
Operator. Declaration ::= "defop" CustomOperator "(" Arg "," Arg ")" ":" Type "=" Exp ;
Value. Declaration ::= "val" QIdent ":" Type "=" Exp ;
Import. Declaration ::= "import" Ident ;

Argument. Arg ::= QIdent ":" Type ;
ArgumentWithDefault. Arg ::= QIdent ":" Type "=" Exp ;

terminator Declaration ";" ;
separator  Arg "," ;

Atom. Type2 ::= QIdent ;
Abstraction. Type ::= Type2 "->" Type ;

coercions Type 2 ;
-- TODO complex types, typeclasses

EApp. Exp ::= Exp Exp2 ;
ECustomOp. Exp1 ::= Exp1 CustomOperator Exp2 ;
EIfThenElse. Exp1 ::= "if" Exp2 "then" Exp2 "else" Exp2 ;
ELambda. Exp1 ::= "\\" Ident "->" Exp2 ;
EMatch. Exp ::= "case" Exp "of" "{" [Case] "}" ;
EAdd. Exp2 ::= Exp2 "+" Exp3 ;
ESub. Exp2 ::= Exp2 "-" Exp3 ;
EMul. Exp3 ::= Exp3 "*" Exp4 ;
EDiv. Exp3 ::= Exp3 "/" Exp4 ;
EVar. Exp4 ::= QIdent ;
EStr. Exp4 ::= String ;
EInt. Exp4 ::= Integer ;
EDouble. Exp4 ::= Double ;
ETrue. Exp4 ::= "true" ;
EFalse. Exp4 ::= "false" ;
EUndefined. Exp4 ::= "???" ;
EBlock. Exp4 ::= "{" [Declaration] Exp "}" ;

coercions Exp 4 ;

Case. Case ::= "|" QIdent [QIdent] "->" Exp ;
separator Case "" ;
separator QIdent "" ;