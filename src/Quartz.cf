comment "//" ;
comment "/*" "*/" ;

position token QIdent (letter (letter | digit | '_')*) ;
token CustomOperator ('>' | '<' | '=' | '$' | '!')('?' | '>' | '<' | '=' | '$' | '!' | '+' | '*' | '/' | '-')* | ('(''+'')') | ('(''*'')') | ('(''/'')') | ('(''-'')');

Qualified. QualifiedIdentifier ::= QIdent "." QIdent ;
DefaultScope. QualifiedIdentifier ::= QIdent ;

Prog. Program ::= [Import] [Declaration] ;
terminator Import ";" ;

NormalImport. Import ::= "import" QIdent ;

Func. Declaration ::= "def" QIdent [TypeQualifier] "(" [Arg] ")" ":" Type "=" Exp ;
ParameterlessFunc. Declaration ::= "def" QIdent [TypeQualifier] "()" ":" Type "=" Exp ;
-- FuncDefault. Declaration ::= "def" QIdent "(" [Arg] ")" "=" Exp ;
Operator. Declaration ::= "defop" CustomOperator [TypeQualifier] "(" Arg "," Arg ")" ":" Type "=" Exp ;
Value. Declaration ::= "val" QIdent ":" Type "=" Exp ;
ValueInferred. Declaration ::= "val" QIdent "=" Exp ;
-- Import. Declaration ::= "import" QIdent ;
Data. Declaration ::= "data" QIdent [QIdent] "=" [DataCase] ;

DataConstructor. DataCase ::= QIdent [Type] ;
separator Type "*" ;
separator nonempty DataCase "|" ;

Argument. Arg ::= QIdent ":" Type ;
ArgumentWithDefault. Arg ::= QIdent ":" Type "=" Exp ;

FreeTypeVariable. TypeQualifier ::= "[" QIdent "]" ;
-- RestrictedTypeVariable. TypeQualifier ::= "[" QIdent ":" [TypeBound] "]" ;
separator TypeQualifier "" ;

-- SimpleTypeBound. TypeBound ::= QIdent ;
-- separator nonempty TypeBound "," ;

terminator Declaration ";" ;
separator  Arg "," ;

Atom. Type2 ::= QualifiedIdentifier;
UnitAtom. Type2 ::= "()" ;
Abstraction. Type ::= Type2 "->" Type ;
Constructor. Type ::= QualifiedIdentifier [Type2] ;
separator nonempty Type2 "" ;
coercions Type 2 ;
-- TODO complex types, typeclasses

ECustomOp. Exp1 ::= Exp2 CustomOperator Exp1 ;
EApp. Exp2 ::= Exp2 Exp3 ;
EIfThenElse. Exp5 ::= "if" Exp4 " then" Exp5 "else" Exp5 ;
ELambda. Exp1 ::= "\\" QIdent "->" Exp ;
EAdd. Exp3 ::= Exp3 "+" Exp4 ;
ESub. Exp3 ::= Exp3 "-" Exp4 ;
EMul. Exp4 ::= Exp4 "*" Exp5 ;
EDiv. Exp4 ::= Exp4 "/" Exp5 ;
EVar. Exp5 ::= QualifiedIdentifier ;
EStr. Exp5 ::= String ;
EInt. Exp5 ::= Integer ;
ENegInt. Exp2 ::= "-" Integer ;
EDouble. Exp5 ::= Double ;
ENegDouble. Exp2 ::= "-" Double ;
EUndefined. Exp5 ::= "???" ;
EUnit. Exp5 ::= "()" ;
EBlock. Exp5 ::= "{" [Declaration] Exp "}" ;
EList. Exp5 ::= "[" [Exp] "]" ;
ETuple. Exp5 ::= "(" Exp "," [Exp] ")" ;
EMatch. Exp5 ::= "case" Exp "of" "{" [Case] "}" ;
EDo. Exp5 ::= "do" "{" [DoClause] "}" ;
separator Exp "," ;
coercions Exp 5 ;

SimpleCase. Case ::= "|" QualifiedIdentifier [QIdent] "->" Exp ;
separator Case "" ;
separator QIdent "" ;

DoExp. DoClause ::= Exp ;
DoLet. DoClause ::= QIdent "<-" Exp ;
separator nonempty DoClause ";"
