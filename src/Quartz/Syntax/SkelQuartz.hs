module Quartz.Syntax.SkelQuartz where

-- Haskell module generated by the BNF converter

import Quartz.Syntax.AbsQuartz
import Quartz.Syntax.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transQIdent :: QIdent -> Result
transQIdent x = case x of
  QIdent string -> failure x
transCustomOperator :: CustomOperator -> Result
transCustomOperator x = case x of
  CustomOperator string -> failure x
transQualifiedIdentifier :: QualifiedIdentifier -> Result
transQualifiedIdentifier x = case x of
  Qualified qident1 qident2 -> failure x
  DefaultScope qident -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog imports declarations -> failure x
transImport :: Import -> Result
transImport x = case x of
  NormalImport qident -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  Func qident typequalifiers args type_ exp -> failure x
  ParameterlessFunc qident typequalifiers type_ exp -> failure x
  Operator customoperator typequalifiers arg1 arg2 type_ exp -> failure x
  Value qident type_ exp -> failure x
  ValueInferred qident exp -> failure x
  Data qident qidents datacases -> failure x
transDataCase :: DataCase -> Result
transDataCase x = case x of
  DataConstructor qident types -> failure x
transArg :: Arg -> Result
transArg x = case x of
  Argument qident type_ -> failure x
  ArgumentWithDefault qident type_ exp -> failure x
transTypeQualifier :: TypeQualifier -> Result
transTypeQualifier x = case x of
  FreeTypeVariable qident -> failure x
transType :: Type -> Result
transType x = case x of
  Atom qualifiedidentifier -> failure x
  UnitAtom -> failure x
  Abstraction type_1 type_2 -> failure x
  Constructor qualifiedidentifier types -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ECustomOp exp1 customoperator exp2 -> failure x
  EApp exp1 exp2 -> failure x
  EIfThenElse exp1 exp2 exp3 -> failure x
  ELambda qident exp -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EVar qualifiedidentifier -> failure x
  EStr string -> failure x
  EInt integer -> failure x
  ENegInt integer -> failure x
  EDouble double -> failure x
  ENegDouble double -> failure x
  EUndefined -> failure x
  EUnit -> failure x
  EBlock declarations exp -> failure x
  EList exps -> failure x
  ETuple exp exps -> failure x
  EMatch exp cases -> failure x
  EDo doclauses -> failure x
transCase :: Case -> Result
transCase x = case x of
  SimpleCase qualifiedidentifier qidents exp -> failure x
transDoClause :: DoClause -> Result
transDoClause x = case x of
  DoExp exp -> failure x
  DoLet qident exp -> failure x

