{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Quartz.
--   Generated by the BNF converter.

module Quartz.Syntax.PrintQuartz where

import Quartz.Syntax.AbsQuartz
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print QIdent where
  prt _ (QIdent (_,i)) = doc (showString i)
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print CustomOperator where
  prt _ (CustomOperator i) = doc (showString i)

instance Print QualifiedIdentifier where
  prt i e = case e of
    Qualified qident1 qident2 -> prPrec i 0 (concatD [prt 0 qident1, doc (showString "."), prt 0 qident2])
    DefaultScope qident -> prPrec i 0 (concatD [prt 0 qident])

instance Print Program where
  prt i e = case e of
    Prog imports declarations -> prPrec i 0 (concatD [prt 0 imports, prt 0 declarations])

instance Print [Import] where
  prt = prtList

instance Print Import where
  prt i e = case e of
    NormalImport qident -> prPrec i 0 (concatD [doc (showString "import"), prt 0 qident])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Declaration where
  prt i e = case e of
    Func qident typequalifiers args type_ exp -> prPrec i 0 (concatD [doc (showString "def"), prt 0 qident, prt 0 typequalifiers, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
    ParameterlessFunc qident typequalifiers type_ exp -> prPrec i 0 (concatD [doc (showString "def"), prt 0 qident, prt 0 typequalifiers, doc (showString "()"), doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
    Operator customoperator typequalifiers arg1 arg2 type_ exp -> prPrec i 0 (concatD [doc (showString "defop"), prt 0 customoperator, prt 0 typequalifiers, doc (showString "("), prt 0 arg1, doc (showString ","), prt 0 arg2, doc (showString ")"), doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
    Value qident type_ exp -> prPrec i 0 (concatD [doc (showString "val"), prt 0 qident, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
    ValueInferred qident exp -> prPrec i 0 (concatD [doc (showString "val"), prt 0 qident, doc (showString "="), prt 0 exp])
    Data qident qidents datacases -> prPrec i 0 (concatD [doc (showString "data"), prt 0 qident, prt 0 qidents, doc (showString "="), prt 0 datacases])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print DataCase where
  prt i e = case e of
    DataConstructor qident types -> prPrec i 0 (concatD [prt 0 qident, prt 0 types])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print [Type] where
  prt = prtList

instance Print [DataCase] where
  prt = prtList

instance Print Arg where
  prt i e = case e of
    Argument qident type_ -> prPrec i 0 (concatD [prt 0 qident, doc (showString ":"), prt 0 type_])
    ArgumentWithDefault qident type_ exp -> prPrec i 0 (concatD [prt 0 qident, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print TypeQualifier where
  prt i e = case e of
    FreeTypeVariable qident -> prPrec i 0 (concatD [doc (showString "["), prt 0 qident, doc (showString "]")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [TypeQualifier] where
  prt = prtList

instance Print [Declaration] where
  prt = prtList

instance Print [Arg] where
  prt = prtList

instance Print Type where
  prt i e = case e of
    Atom qualifiedidentifier -> prPrec i 2 (concatD [prt 0 qualifiedidentifier])
    UnitAtom -> prPrec i 2 (concatD [doc (showString "()")])
    Abstraction type_1 type_2 -> prPrec i 0 (concatD [prt 2 type_1, doc (showString "->"), prt 0 type_2])
    Constructor qualifiedidentifier types -> prPrec i 0 (concatD [prt 0 qualifiedidentifier, prt 2 types])
  prtList 2 [x] = concatD [prt 2 x]
  prtList 2 (x:xs) = concatD [prt 2 x, prt 2 xs]
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "*"), prt 0 xs]

instance Print [Exp] where
  prt = prtList

instance Print Exp where
  prt i e = case e of
    ECustomOp exp1 customoperator exp2 -> prPrec i 1 (concatD [prt 2 exp1, prt 0 customoperator, prt 1 exp2])
    EApp exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, prt 3 exp2])
    EIfThenElse exp1 exp2 exp3 -> prPrec i 5 (concatD [doc (showString "if"), prt 4 exp1, doc (showString "then"), prt 5 exp2, doc (showString "else"), prt 5 exp3])
    ELambda qident exp -> prPrec i 1 (concatD [doc (showString "\\"), prt 0 qident, doc (showString "->"), prt 0 exp])
    EAdd exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "+"), prt 4 exp2])
    ESub exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "-"), prt 4 exp2])
    EMul exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "*"), prt 5 exp2])
    EDiv exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "/"), prt 5 exp2])
    EVar qualifiedidentifier -> prPrec i 5 (concatD [prt 0 qualifiedidentifier])
    EStr str -> prPrec i 5 (concatD [prt 0 str])
    EInt n -> prPrec i 5 (concatD [prt 0 n])
    ENegInt n -> prPrec i 2 (concatD [doc (showString "-"), prt 0 n])
    EDouble d -> prPrec i 5 (concatD [prt 0 d])
    ENegDouble d -> prPrec i 2 (concatD [doc (showString "-"), prt 0 d])
    EUndefined -> prPrec i 5 (concatD [doc (showString "???")])
    EUnit -> prPrec i 5 (concatD [doc (showString "()")])
    EBlock declarations exp -> prPrec i 5 (concatD [doc (showString "{"), prt 0 declarations, prt 0 exp, doc (showString "}")])
    EList exps -> prPrec i 5 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    ETuple exp exps -> prPrec i 5 (concatD [doc (showString "("), prt 0 exp, doc (showString ","), prt 0 exps, doc (showString ")")])
    EMatch exp cases -> prPrec i 5 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 cases, doc (showString "}")])
    EDo doclauses -> prPrec i 5 (concatD [doc (showString "do"), doc (showString "{"), prt 0 doclauses, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Case where
  prt i e = case e of
    SimpleCase qualifiedidentifier qidents exp -> prPrec i 0 (concatD [doc (showString "|"), prt 0 qualifiedidentifier, prt 0 qidents, doc (showString "->"), prt 0 exp])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Case] where
  prt = prtList

instance Print [QIdent] where
  prt = prtList

instance Print DoClause where
  prt i e = case e of
    DoExp exp -> prPrec i 0 (concatD [prt 0 exp])
    DoLet qident exp -> prPrec i 0 (concatD [prt 0 qident, doc (showString "<-"), prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [DoClause] where
  prt = prtList

