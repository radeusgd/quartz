data EList a = ENil | ECons a * (EList a);

data Maybe a = Nothing | Just a;

def head[a](x: EList a): a = case x of {
    | ECons h t -> h
    | ENil -> error "empty list"
};

def headMay(x: EList Int): Maybe Int = case x of {
    | ECons h t -> Just h
    | ENil -> Nothing
};

def listToEList[a](l: List a): EList a = case l of {
    | Cons h t -> ECons h (listToEList t)
    | Nil -> ENil
};

val lst: EList Int = listToEList [-1, 0, 1];

def length[a](l: EList a): Int = case l of {
    | ECons h t -> 1 + (length t)
    | ENil -> 0
};

def range(start: Int, stop: Int): EList Int = if (start > stop) then ENil else (ECons start (range (start + 1) stop));

val l2: EList Int = range 0 10;

def main(): IO () = print ((toString (head lst)) <+> "\n" <+> (toString (length l2)) <+> "\n" <+> (toString l2));
