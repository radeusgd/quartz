// many interesting examples in Prelude: polymorphic id, const, polymorphic recursive datatypes (List a)
import Prelude;

// lambdas with type reconstruction
def echo(): IO () = readLine >>= (\line -> (print line));

// recursive definitions are allowed, but full type signature is required
def fact(n: Int): Int = if (n == 0)
    then 1
    else n * (fact (n - 1));

def block(a: Int, b: Int): String = {
    // let-blocks with type reconstruction
    // top-level definitions need full type by design
    val c = a + b;
    val d: String = {
        val x: String = "a";
        val y: String = "b";
        x <+> y
    };
    def go(x: Int): Int = c * x;
    toString (go a) <+> d
};

/*
  do notation that's transformed into >> and >>=
  Initially, >>= :: IO a -> (a -> IO b) -> IO b
  Type classes not supported in first version, so it works for IO only, not all monads.
*/
def twolines(): IO () = do {
    print "Line 1:";
    a <- readLine;
    print "Line 2:";
    b <- readLine;
    print "Concatenated:";
    print (a <+> b)
};

def todo[a](): a = ???; // a placeholder for not implemented operations that's equal to `error "???"`

// ability to define custom operators (all custom operators have the same precedence)
defop ><[a][b][c](f: b -> c, g: a -> b): a -> c = \x -> f (g x);

// limit strictly evaluates it's second argument and if it exceeds the amount of function applications permitted (first argument), it terminates the computation and yields Nothing; if the computation succeeds without exceeding the quota, it yields Just (the result fo the computation)
def infiniteRec(): String = "a" <+> infiniteRec;
val limited: String = getOrElse (limit 1000 infiniteRec) "terminated";

def reverse_alt[a](l: List a): List a = { def revac(acc: List a, rest: List a): List a = case rest of { | Nil -> acc | Cons h t -> revac (Cons h acc) t }; revac [] l };

def main(): IO () = do {
    {
        val len = length ([1.0,2.0] <++> [3.0,4.0]);
        print $ (id >< toString) len // 4
    };
    print $ "fact 5 = " <+> (toString >< fact) 5; // 120
    print $ unsafeHead ["a", "b", "c"]; // a
    print $ const "x" 3; // x
    print limited; // terminated
    {
        val lst: List (List Int) = [[1,2],[],[],[3,4],[]];
        val len = length (flatten lst);
        (print >< toString) len // 4
    };
    echo;
    twolines
};
